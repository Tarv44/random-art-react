[{"/Users/jonahtarver/coding/www/react-random-art-richter/src/App.js":"1","/Users/jonahtarver/coding/www/react-random-art-richter/src/Grid/Grid.js":"2","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/generateEmptyGrid.js":"3","/Users/jonahtarver/coding/www/react-random-art-richter/src/Nav/Nav.js":"4","/Users/jonahtarver/coding/www/react-random-art-richter/src/index.js":"5","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/colorFunctions.js":"6","/Users/jonahtarver/coding/www/react-random-art-richter/src/GridContext.js":"7","/Users/jonahtarver/coding/www/react-random-art-richter/src/GridForm/GridForm.js":"8","/Users/jonahtarver/coding/www/react-random-art-richter/src/Column/Column.js":"9","/Users/jonahtarver/coding/www/react-random-art-richter/src/Cell/Cell.js":"10","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/fillGrid.js":"11"},{"size":3038,"mtime":1609324762000,"results":"12","hashOfConfig":"13"},{"size":563,"mtime":1608111293000,"results":"14","hashOfConfig":"13"},{"size":1250,"mtime":1609315498000,"results":"15","hashOfConfig":"13"},{"size":479,"mtime":1608112656000,"results":"16","hashOfConfig":"13"},{"size":263,"mtime":1608105442000,"results":"17","hashOfConfig":"13"},{"size":438,"mtime":1608103096000,"results":"18","hashOfConfig":"13"},{"size":192,"mtime":1609290292000,"results":"19","hashOfConfig":"13"},{"size":475,"mtime":1609290858000,"results":"20","hashOfConfig":"13"},{"size":483,"mtime":1608112194000,"results":"21","hashOfConfig":"13"},{"size":866,"mtime":1609315539000,"results":"22","hashOfConfig":"13"},{"size":4294,"mtime":1609325797000,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},"19zx1a4",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},"/Users/jonahtarver/coding/www/react-random-art-richter/src/App.js",["52","53"],"import React, {Component} from 'react';\nimport Grid from './Grid/Grid';\nimport generateEmptyGrid from './functions/generateEmptyGrid';\nimport {randomRGB} from './functions/colorFunctions';\nimport {fillColor, fillInitCells} from './functions/fillGrid';\nimport Nav from './Nav/Nav';\nimport {Route ,Redirect} from 'react-router-dom';\nimport GridContext from './GridContext';\nimport GridForm from './GridForm/GridForm'\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      emptyGridsRendered: false,\n      small: {\n        totalColumns: 25,\n        totalRows: 12,\n        intervalDelay: 1000,\n        grid: null\n      },\n      medium: {\n        totalColumns: 42,\n        totalRows: 20,\n        intervalDelay: 750,\n        grid: null\n      },\n      large: {\n        totalColumns: 84,\n        totalRows: 40,\n        intervalDelay: 500,\n        grid: null\n      },\n      extraLarge: {\n        totalColumns: 250,\n        totalRows: 120,\n        intervalDelay: 250,\n        grid: null\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.setState(prevState => ({\n      emptyGridsRendered: true,\n      small: {\n        ...prevState.small,\n        grid: generateEmptyGrid(this.state.small, 'small'),\n      },\n      medium: {\n        ...prevState.medium,\n        grid: generateEmptyGrid(this.state.medium, 'medium')\n      },\n      large: {\n        ...prevState.large,\n        grid: generateEmptyGrid(this.state.large, 'large')\n      },\n      extraLarge: {\n        ...prevState.extraLarge,\n        grid: generateEmptyGrid(this.state.extraLarge, 'extraLarge')\n      }\n\n    }))   \n  }\n\n  handleFormSubmit = (event, gridId) => {\n    event.preventDefault();\n\n    const firstState = fillInitCells(this.state, gridId);\n    this.setState({\n      firstState\n    })\n\n    const intervalDelay = this.state[gridId].intervalDelay;\n    const gridSize = this.state[gridId].totalColumns * this.state[gridId].totalRows\n    let count = 0\n    const fillInterval = setInterval(() => {\n      if (count < gridSize) {\n        const newState = fillColor(this.state, gridId)\n        this.setState({\n          newState\n        })\n        count += 1;\n      } else {\n        clearInterval(fillInterval);\n      }\n    },intervalDelay);\n    // const newState = this.state;\n    // newState[gridId].grid.columns[0][0].color = randomRGB();\n    // \n  }\n  \n  \n  render() {\n    const contextValue = {\n      small: this.state.small,\n      medium: this.state.medium,\n      large: this.state.large,\n      extraLarge: this.state.extraLarge,\n      formSubmit: this.handleFormSubmit\n    }\n\n    return (\n      <GridContext.Provider value={contextValue}>\n        <div className=\"App\">\n          <Nav />\n          <main >\n            {this.state.emptyGridsRendered && <Route exact path={'/grid/:gridId'} component={GridForm}/>}\n            {this.state.emptyGridsRendered && <Route exact path={'/grid/:gridId'} component={Grid}/>}\n          </main>\n        </div> \n      </GridContext.Provider>    \n    );\n  }\n  \n}\n\nexport default App;","/Users/jonahtarver/coding/www/react-random-art-richter/src/Grid/Grid.js",[],["54","55"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/generateEmptyGrid.js",["56","57"],"import {randomRGB} from './colorFunctions';\n\nfunction generateEmptyCell(col, r, gridSize, animationDelay) {\n    const cellId = `c${col}r${r}`\n    const emptyCell = {\n        id: cellId,\n        column: col,\n        row: r,\n        gridSize: gridSize,\n        opacity: 0,\n        color: null\n    }\n    return emptyCell\n}\n\nexport default function generateEmptyGrid(state, gridSize) {\n    const gridState = {}\n    const gridArray = []\n    let animationDelay = 0\n    for (let i = 0; i < state.totalColumns; i++) {\n        const columnArray = []\n        for (let p = 0; p < state.totalRows; p++) {\n            columnArray.push(generateEmptyCell(i, p, gridSize, animationDelay))\n            animationDelay += .01\n        }\n        gridArray.push(columnArray)\n    }\n    gridState.columns = gridArray\n    return gridState\n}\n\nexport function generateDummyGrid() {\n    const gridState = {}\n    const gridArray = []\n    let animationDelay = 0\n    for (let i = 0; i < 10; i++) {\n        const columnArray = []\n        for (let p = 0; p < 10; p++) {\n            columnArray.push(generateEmptyCell(i, p, 'testSize', .05))\n            animationDelay += .01\n        }\n        gridArray.push(columnArray)\n    }\n    gridState.columns = gridArray\n    return gridState\n}","/Users/jonahtarver/coding/www/react-random-art-richter/src/Nav/Nav.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/index.js",[],["58","59"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/colorFunctions.js",["60"],"import React from 'react';\n\nfunction randomFromRange(range) {\n    return Math.floor(Math.random() * range)\n}\n\nexport function randomRGB() {\n    const colorObject = {}\n    colorObject.red = randomFromRange(256)\n    colorObject.green = randomFromRange(256)\n    colorObject.blue = randomFromRange(256)\n    const rgb = `rgba(${colorObject.red}, ${colorObject.green}, ${colorObject.blue}, 1)`\n    colorObject.rgb = rgb\n    return colorObject\n}","/Users/jonahtarver/coding/www/react-random-art-richter/src/GridContext.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/GridForm/GridForm.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/Column/Column.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/Cell/Cell.js",["61"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/fillGrid.js",["62","63"],"import React, {Component} from 'react';\nimport {randomRGB} from './colorFunctions';\n\nfunction randomFromRange(range) {\n    return Math.floor(Math.random() * range)\n}\n\nfunction selectRandomCell(totalColumns, totalRows) {\n    const column = randomFromRange(totalColumns);\n    const row = randomFromRange(totalRows);\n    return {column, row}\n}\n\nfunction surroundingCoors(currentGrid, cellCoor) {\n    const columns = [cellCoor.column-1, cellCoor.column, cellCoor.column+1]\n        .filter(num => num > -1 && num < currentGrid.totalColumns)\n    const rows = [cellCoor.row-1, cellCoor.row, cellCoor.row+1]\n        .filter(num => num > -1 && num < currentGrid.totalRows)\n    const coors = [];\n    for (let c = 0; c < columns.length; c++) {\n        for (let r = 0; r < rows.length; r++) {\n            const coor = {column: columns[c], row: rows[r]}\n            if (!(cellCoor.column === coor.column && cellCoor.row === coor.row)) {\n                coors.push(coor)\n            }\n\n        }\n    }\n    return coors\n}\n\nfunction getSurroundingColors(currentGrid, cellCoor) {\n    const coors = surroundingCoors(currentGrid, cellCoor);\n    const surrColors = [];\n    for (let i = 0; i < coors.length; i++) {\n        const cellColor = currentGrid.grid.columns[coors[i].column][coors[i].row].color\n        if (cellColor !== null) {\n            surrColors.push(cellColor)\n        }\n    }\n    return surrColors\n}\n\nfunction skewColor(color) {\n    console.log('skew color ran.')\n    console.log('Original Color:', color)\n    let red \n    let green\n    let blue\n    const redChange = (Math.floor(Math.random() * 10) + 1)\n    const greenChange = (Math.floor(Math.random() * 10) + 1)\n    const blueChange = (Math.floor(Math.random() * 10) + 1)\n\n    if (Math.random() < .5) {\n        red = color.red + redChange\n        if (red > 255) {\n            red = 255\n        }\n    } else {\n        red = color.red - redChange\n        if (red < 0) {\n            red = 0\n        }\n    }\n\n    if (Math.random() < .5) {\n        green = color.green + greenChange\n        if (green > 255) {\n            green = 255\n        }\n    } else {\n        green = color.green - greenChange\n        if (green < 0) {\n            green = 0\n        }\n    }\n\n    if (Math.random() < .5) {\n        blue = color.blue + blueChange\n        if (blue > 255) {\n            blue = 255\n        }\n    } else {\n        blue = color.blue - blueChange\n        if (blue < 0) {\n            blue = 0\n        }\n    }\n\n    const rgb = `rgba(${red}, ${green}, ${blue}, 1)`\n\n    const newColor = {red, green, blue, rgb}\n\n    console.log('New Color:', newColor)\n    return newColor\n}\n\nfunction selectNewColor(surrColors) {\n    const probability = (Math.random()*100)\n    const colorIndex = (Math.floor(surrColors.length * Math.random()))\n    const colorSelect = surrColors[colorIndex]\n    let newColor\n    if (probability <= 80) {\n        newColor = colorSelect\n    } else if (probability <= 99) {\n        newColor = skewColor(colorSelect)\n    } else {\n        newColor = randomRGB()\n    }\n    return newColor\n}\n\nexport function fillInitCells(state, gridId) {\n    const currentGrid = state[gridId]\n    const cellCoor = selectRandomCell(currentGrid.totalColumns, currentGrid.totalRows);\n    currentGrid.grid.columns[cellCoor.column][cellCoor.row].color = randomRGB();\n    currentGrid.grid.columns[cellCoor.column][cellCoor.row].opacity = 1;\n    const newState = state;\n    newState[gridId] = currentGrid;\n    return newState;\n}\n\nexport function fillColor(state, gridId) {\n    const currentGrid = state[gridId]\n\n    let unSelected = true;\n    while(unSelected) {\n        const cellCoor = selectRandomCell(currentGrid.totalColumns, currentGrid.totalRows);\n        const cell = currentGrid.grid.columns[cellCoor.column][cellCoor.row]\n        if (cell.color === null) {\n            const surrColors = getSurroundingColors(currentGrid, cellCoor);\n            if (surrColors.length > 0) {\n                const newColor = selectNewColor(surrColors)\n                currentGrid.grid.columns[cellCoor.column][cellCoor.row].color = newColor;\n                currentGrid.grid.columns[cellCoor.column][cellCoor.row].opacity = 1;\n                unSelected = false\n            }\n        } \n    }\n\n    const newState = state;\n    newState[gridId] = currentGrid\n    return newState\n}",{"ruleId":"64","severity":1,"message":"65","line":4,"column":9,"nodeType":"66","messageId":"67","endLine":4,"endColumn":18},{"ruleId":"64","severity":1,"message":"68","line":7,"column":16,"nodeType":"66","messageId":"67","endLine":7,"endColumn":24},{"ruleId":"69","replacedBy":"70"},{"ruleId":"71","replacedBy":"72"},{"ruleId":"64","severity":1,"message":"65","line":1,"column":9,"nodeType":"66","messageId":"67","endLine":1,"endColumn":18},{"ruleId":"64","severity":1,"message":"73","line":40,"column":13,"nodeType":"66","messageId":"67","endLine":40,"endColumn":27},{"ruleId":"69","replacedBy":"74"},{"ruleId":"71","replacedBy":"75"},{"ruleId":"64","severity":1,"message":"76","line":1,"column":8,"nodeType":"66","messageId":"67","endLine":1,"endColumn":13},{"ruleId":"64","severity":1,"message":"73","line":23,"column":15,"nodeType":"66","messageId":"67","endLine":23,"endColumn":29},{"ruleId":"64","severity":1,"message":"76","line":1,"column":8,"nodeType":"66","messageId":"67","endLine":1,"endColumn":13},{"ruleId":"64","severity":1,"message":"77","line":1,"column":16,"nodeType":"66","messageId":"67","endLine":1,"endColumn":25},"no-unused-vars","'randomRGB' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.","no-native-reassign",["78"],"no-negated-in-lhs",["79"],"'animationDelay' is assigned a value but never used.",["78"],["79"],"'React' is defined but never used.","'Component' is defined but never used.","no-global-assign","no-unsafe-negation"]