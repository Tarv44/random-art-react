[{"/Users/jonahtarver/coding/www/react-random-art-richter/src/Grid/Grid.js":"1","/Users/jonahtarver/coding/www/react-random-art-richter/src/App.js":"2","/Users/jonahtarver/coding/www/react-random-art-richter/src/index.js":"3","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/fillGrid.js":"4","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/generateEmptyGrid.js":"5","/Users/jonahtarver/coding/www/react-random-art-richter/src/GridContext.js":"6","/Users/jonahtarver/coding/www/react-random-art-richter/src/GridForm/GridForm.js":"7","/Users/jonahtarver/coding/www/react-random-art-richter/src/Nav/Nav.js":"8","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/colorFunctions.js":"9","/Users/jonahtarver/coding/www/react-random-art-richter/src/colorFillChances/colorFillChances.js":"10","/Users/jonahtarver/coding/www/react-random-art-richter/src/Cell/Cell.js":"11","/Users/jonahtarver/coding/www/react-random-art-richter/src/TimeSizeConstraints/TimeSizeConstraints.js":"12","/Users/jonahtarver/coding/www/react-random-art-richter/src/NodeConstraints/NodeConstraints.js":"13","/Users/jonahtarver/coding/www/react-random-art-richter/src/GridStatus/GridStatus.js":"14"},{"size":857,"mtime":1611220981847,"results":"15","hashOfConfig":"16"},{"size":6433,"mtime":1611222614897,"results":"17","hashOfConfig":"16"},{"size":263,"mtime":1608105442000,"results":"18","hashOfConfig":"16"},{"size":6614,"mtime":1611218004355,"results":"19","hashOfConfig":"16"},{"size":1250,"mtime":1609315498000,"results":"20","hashOfConfig":"16"},{"size":364,"mtime":1610179395980,"results":"21","hashOfConfig":"16"},{"size":1150,"mtime":1610179475199,"results":"22","hashOfConfig":"16"},{"size":357,"mtime":1611216443103,"results":"23","hashOfConfig":"16"},{"size":438,"mtime":1608103096000,"results":"24","hashOfConfig":"16"},{"size":2192,"mtime":1610235259287,"results":"25","hashOfConfig":"16"},{"size":866,"mtime":1610146131557,"results":"26","hashOfConfig":"16"},{"size":1071,"mtime":1610154641694,"results":"27","hashOfConfig":"16"},{"size":2791,"mtime":1610153648127,"results":"28","hashOfConfig":"16"},{"size":583,"mtime":1611221070628,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},"19zx1a4",{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},"/Users/jonahtarver/coding/www/react-random-art-richter/src/Grid/Grid.js",["66"],"import React, {Component} from 'react';\nimport GridContext from '../GridContext';\nimport Column from '../Column/Column';\nimport './Grid.css'\n\nclass Grid extends Component {\n    static contextType = GridContext;\n\n    render() {\n        const gridId = this.props.match.params.gridId\n        const cellsFilled = this.context[gridId].totalCellsFilled\n        console.log(cellsFilled)\n        const totalCells = this.context[gridId].totalCells\n        const columns = this.context[gridId].grid !== null \n            ? this.context[gridId].grid.columns.map((column, i) => {\n                return <Column columnData={column} key={i}/>\n            })\n            : null\n\n        return (\n            <div className=\"grid\">\n                {columns \n                    ? columns \n                    : ``}\n            </div>\n        )\n    }\n}\n\nexport default Grid;","/Users/jonahtarver/coding/www/react-random-art-richter/src/App.js",["67","68","69"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/index.js",[],["70","71"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/fillGrid.js",["72","73","74"],"import React, {Component} from 'react';\nimport {randomRGB} from './colorFunctions';\nimport generateEmptyGrid from './generateEmptyGrid';\n\nfunction randomFromRange(range) {\n    return Math.floor(Math.random() * range)\n}\n\nfunction randomFromArray(array) {\n    const i = randomFromRange(array.length)\n    return array[i]\n}\n\nfunction selectRandomCell(totalColumns, totalRows) {\n    const column = randomFromRange(totalColumns);\n    const row = randomFromRange(totalRows);\n    return {column, row}\n}\n\nfunction selectFillCenter(currentGrid) {\n    const index = randomFromRange(currentGrid.fillCenters.length)\n    const coors = currentGrid.fillCenters[index]\n    return {coors, index}\n    \n}\n\nfunction allSurrCoors(gridCols, cellCoor) {\n    const columns = [cellCoor.column-1, cellCoor.column, cellCoor.column+1]\n        .filter(num => num > -1 && num < gridCols.length)\n    const rows = [cellCoor.row-1, cellCoor.row, cellCoor.row+1]\n        .filter(num => num > -1 && num < gridCols[0].length)\n    const coors = [];\n    for (let c = 0; c < columns.length; c++) {\n        for (let r = 0; r < rows.length; r++) {\n            const id = `c${columns[c]}r${rows[r]}`\n            const coor = {column: columns[c], row: rows[r], id}\n            if (!(cellCoor.column === coor.column && cellCoor.row === coor.row)) {\n                coors.push(coor)\n            }\n\n        }\n    }\n    return coors\n}\n\nfunction getSurrEmpties(gridCols, cellCoor) {\n    const surrCoors = allSurrCoors(gridCols, cellCoor)\n    const surrEmpties = surrCoors.filter(coor => \n        gridCols[coor.column][coor.row].color === null)\n    return surrEmpties\n}\n\nfunction getSurrColors(gridCols, cellCoor) {\n    const coors = allSurrCoors(gridCols, cellCoor);\n    const surrColors = coors.filter(coor =>\n        gridCols[coor.column][coor.row].color !== null)\n    return surrColors\n}\n\nfunction updateFillableCells(gridCols, fillableCells, currentCoor) {\n    const newList = fillableCells.filter(cell => cell.id !== currentCoor.id)\n    const allSurrEmpties = getSurrEmpties(gridCols, currentCoor)\n    const newFillables = []\n    for(let i = 0; i < allSurrEmpties.length; i++) {\n        if(!fillableCells.some(cell => cell.id === allSurrEmpties[i].id)) {\n            newFillables.push(allSurrEmpties[i])\n        }\n    }\n    return newList.concat(newFillables)\n}\n\nfunction skewColor(color, currentGridConstraints) {\n    const range = currentGridConstraints.skewConstraints.changeRange\n    let red \n    let green\n    let blue\n    const redChange = (Math.floor(Math.random() * range) + 1)\n    const greenChange = (Math.floor(Math.random() * range) + 1)\n    const blueChange = (Math.floor(Math.random() * range) + 1)\n\n    if (Math.random() < .5) {\n        red = color.red + redChange\n        if (red > 255) {\n            red = 255\n        }\n    } else {\n        red = color.red - redChange\n        if (red < 0) {\n            red = 0\n        }\n    }\n\n    if (Math.random() < .5) {\n        green = color.green + greenChange\n        if (green > 255) {\n            green = 255\n        }\n    } else {\n        green = color.green - greenChange\n        if (green < 0) {\n            green = 0\n        }\n    }\n\n    if (Math.random() < .5) {\n        blue = color.blue + blueChange\n        if (blue > 255) {\n            blue = 255\n        }\n    } else {\n        blue = color.blue - blueChange\n        if (blue < 0) {\n            blue = 0\n        }\n    }\n\n    const rgb = `rgba(${red}, ${green}, ${blue}, 1)`\n\n    const newColor = {red, green, blue, rgb}\n    return newColor\n}\n\nfunction selectNewColor(surrColor, currentGridConstraints) {\n    const probability = (Math.random()*100)\n    const colorChances = currentGridConstraints.colorChances\n    let newColor\n    if (probability <= parseFloat(colorChances.same)) {\n        newColor = surrColor\n    } else if (probability <= parseFloat(colorChances.same) + parseFloat(colorChances.skew)) {\n        newColor = skewColor(surrColor, currentGridConstraints)\n    } else {\n        newColor = randomRGB()\n    }\n    return newColor\n}\n\nfunction fillInitCells(currentGrid) {\n    const totalStartNodes = currentGrid.formConstraints.nodeConstraints.totalStart\n    for (let i = 1; i <= totalStartNodes; i++) {\n        const cellCoor = selectRandomCell(currentGrid.totalColumns, currentGrid.totalRows);\n        currentGrid.grid.columns[cellCoor.column][cellCoor.row].color = randomRGB();\n        currentGrid.grid.columns[cellCoor.column][cellCoor.row].opacity = 1;\n        currentGrid.totalCellsFilled += 1\n        currentGrid.fillCenters.push(cellCoor)\n        currentGrid.fillableCells = currentGrid.fillableCells.concat(getSurrEmpties(currentGrid.grid.columns, cellCoor))\n    }\n    return currentGrid\n}\n\nexport function fillStart(currentGrid, gridId) {\n    if (currentGrid.totalCellsFilled === currentGrid.totalCells) {\n        currentGrid.grid = generateEmptyGrid(currentGrid, gridId)\n        currentGrid.totalCellsFilled = 0\n    }\n\n    if (currentGrid.totalCellsFilled === 0) {\n        currentGrid = fillInitCells(currentGrid)\n    }\n\n    currentGrid.filling = true\n    return currentGrid\n}\n\nexport function fillColor(currentGrid) {\n    const gridCols = currentGrid.grid.columns\n    const fillableCoor = randomFromArray(currentGrid.fillableCells)\n    \n    // while (fillableCoor.length === 0) {\n    //     const fillCenter = selectFillCenter(currentGrid)\n    //     const surrEmpties = getSurrEmpties(currentGrid, fillCenter.coors)\n    //     if(surrEmpties.length === 0) {\n    //         fillCenters.splice(fillCenter.index, 1)\n    //     } else if (surrEmpties.length === 1) {\n    //         fillableCoor[0] = surrEmpties[0]\n    //         fillCenters.splice(fillCenter.index, 1)\n    //     } else {\n    //         fillableCoor[0] = randomFromArray(surrEmpties)\n    //     }\n    // }\n\n    // if(getSurrEmpties(currentGrid, fillableCoor[0]).length !== 0) {\n    //     fillCenters.push(fillableCoor[0])\n    // }\n    \n\n    const fillableCells = updateFillableCells(gridCols, currentGrid.fillableCells, fillableCoor)\n\n    const surrColorsCoors = getSurrColors(gridCols, fillableCoor)\n    const baseColorCoor = randomFromArray(surrColorsCoors)\n    const baseColor = currentGrid.grid.columns[baseColorCoor.column][baseColorCoor.row].color\n    const newColor = selectNewColor(baseColor, currentGrid.formConstraints)\n    currentGrid.grid.columns[fillableCoor.column][fillableCoor.row].color = newColor;\n    currentGrid.grid.columns[fillableCoor.column][fillableCoor.row].opacity = 1;\n    currentGrid.totalCellsFilled += 1;\n    // currentGrid.fillCenters = fillCenters\n    currentGrid.fillableCells = fillableCells\n\n    return currentGrid\n}","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/generateEmptyGrid.js",["75","76"],"import {randomRGB} from './colorFunctions';\n\nfunction generateEmptyCell(col, r, gridSize, animationDelay) {\n    const cellId = `c${col}r${r}`\n    const emptyCell = {\n        id: cellId,\n        column: col,\n        row: r,\n        gridSize: gridSize,\n        opacity: 0,\n        color: null\n    }\n    return emptyCell\n}\n\nexport default function generateEmptyGrid(state, gridSize) {\n    const gridState = {}\n    const gridArray = []\n    let animationDelay = 0\n    for (let i = 0; i < state.totalColumns; i++) {\n        const columnArray = []\n        for (let p = 0; p < state.totalRows; p++) {\n            columnArray.push(generateEmptyCell(i, p, gridSize, animationDelay))\n            animationDelay += .01\n        }\n        gridArray.push(columnArray)\n    }\n    gridState.columns = gridArray\n    return gridState\n}\n\nexport function generateDummyGrid() {\n    const gridState = {}\n    const gridArray = []\n    let animationDelay = 0\n    for (let i = 0; i < 10; i++) {\n        const columnArray = []\n        for (let p = 0; p < 10; p++) {\n            columnArray.push(generateEmptyCell(i, p, 'testSize', .05))\n            animationDelay += .01\n        }\n        gridArray.push(columnArray)\n    }\n    gridState.columns = gridArray\n    return gridState\n}",["77","78"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/GridContext.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/GridForm/GridForm.js",[],["79","80"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/Nav/Nav.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/colorFunctions.js",["81"],"import React from 'react';\n\nfunction randomFromRange(range) {\n    return Math.floor(Math.random() * range)\n}\n\nexport function randomRGB() {\n    const colorObject = {}\n    colorObject.red = randomFromRange(256)\n    colorObject.green = randomFromRange(256)\n    colorObject.blue = randomFromRange(256)\n    const rgb = `rgba(${colorObject.red}, ${colorObject.green}, ${colorObject.blue}, 1)`\n    colorObject.rgb = rgb\n    return colorObject\n}","/Users/jonahtarver/coding/www/react-random-art-richter/src/colorFillChances/colorFillChances.js",[],["82","83"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/Cell/Cell.js",["84"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/TimeSizeConstraints/TimeSizeConstraints.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/NodeConstraints/NodeConstraints.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/GridStatus/GridStatus.js",[],{"ruleId":"85","severity":1,"message":"86","line":13,"column":15,"nodeType":"87","messageId":"88","endLine":13,"endColumn":25},{"ruleId":"85","severity":1,"message":"89","line":4,"column":9,"nodeType":"87","messageId":"88","endLine":4,"endColumn":18},{"ruleId":"85","severity":1,"message":"90","line":7,"column":16,"nodeType":"87","messageId":"88","endLine":7,"endColumn":24},{"ruleId":"85","severity":1,"message":"91","line":8,"column":8,"nodeType":"87","messageId":"88","endLine":8,"endColumn":18},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"85","severity":1,"message":"96","line":1,"column":8,"nodeType":"87","messageId":"88","endLine":1,"endColumn":13},{"ruleId":"85","severity":1,"message":"97","line":1,"column":16,"nodeType":"87","messageId":"88","endLine":1,"endColumn":25},{"ruleId":"85","severity":1,"message":"98","line":20,"column":10,"nodeType":"87","messageId":"88","endLine":20,"endColumn":26},{"ruleId":"85","severity":1,"message":"89","line":1,"column":9,"nodeType":"87","messageId":"88","endLine":1,"endColumn":18},{"ruleId":"85","severity":1,"message":"99","line":40,"column":13,"nodeType":"87","messageId":"88","endLine":40,"endColumn":27},{"ruleId":"92","replacedBy":"100"},{"ruleId":"94","replacedBy":"101"},{"ruleId":"92","replacedBy":"102"},{"ruleId":"94","replacedBy":"103"},{"ruleId":"85","severity":1,"message":"96","line":1,"column":8,"nodeType":"87","messageId":"88","endLine":1,"endColumn":13},{"ruleId":"92","replacedBy":"104"},{"ruleId":"94","replacedBy":"105"},{"ruleId":"85","severity":1,"message":"99","line":23,"column":15,"nodeType":"87","messageId":"88","endLine":23,"endColumn":29},"no-unused-vars","'totalCells' is assigned a value but never used.","Identifier","unusedVar","'randomRGB' is defined but never used.","'Redirect' is defined but never used.","'GridStatus' is defined but never used.","no-native-reassign",["106"],"no-negated-in-lhs",["107"],"'React' is defined but never used.","'Component' is defined but never used.","'selectFillCenter' is defined but never used.","'animationDelay' is assigned a value but never used.",["106"],["107"],["106"],["107"],["106"],["107"],"no-global-assign","no-unsafe-negation"]