[{"/Users/jonahtarver/coding/www/react-random-art-richter/src/Grid/Grid.js":"1","/Users/jonahtarver/coding/www/react-random-art-richter/src/App.js":"2","/Users/jonahtarver/coding/www/react-random-art-richter/src/index.js":"3","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/fillGrid.js":"4","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/generateEmptyGrid.js":"5","/Users/jonahtarver/coding/www/react-random-art-richter/src/GridContext.js":"6","/Users/jonahtarver/coding/www/react-random-art-richter/src/GridForm/GridForm.js":"7","/Users/jonahtarver/coding/www/react-random-art-richter/src/Nav/Nav.js":"8","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/colorFunctions.js":"9","/Users/jonahtarver/coding/www/react-random-art-richter/src/colorFillChances/colorFillChances.js":"10","/Users/jonahtarver/coding/www/react-random-art-richter/src/Cell/Cell.js":"11","/Users/jonahtarver/coding/www/react-random-art-richter/src/TimeSizeConstraints/TimeSizeConstraints.js":"12","/Users/jonahtarver/coding/www/react-random-art-richter/src/NodeConstraints/NodeConstraints.js":"13"},{"size":563,"mtime":1608111293000,"results":"14","hashOfConfig":"15"},{"size":7581,"mtime":1610490748082,"results":"16","hashOfConfig":"15"},{"size":263,"mtime":1608105442000,"results":"17","hashOfConfig":"15"},{"size":6972,"mtime":1610491546906,"results":"18","hashOfConfig":"15"},{"size":1250,"mtime":1609315498000,"results":"19","hashOfConfig":"15"},{"size":364,"mtime":1610179395980,"results":"20","hashOfConfig":"15"},{"size":1150,"mtime":1610179475199,"results":"21","hashOfConfig":"15"},{"size":479,"mtime":1608112656000,"results":"22","hashOfConfig":"15"},{"size":438,"mtime":1608103096000,"results":"23","hashOfConfig":"15"},{"size":2192,"mtime":1610235259287,"results":"24","hashOfConfig":"15"},{"size":866,"mtime":1610146131557,"results":"25","hashOfConfig":"15"},{"size":1071,"mtime":1610154641694,"results":"26","hashOfConfig":"15"},{"size":2791,"mtime":1610153648127,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"19zx1a4",{"filePath":"31","messages":"32","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"37"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jonahtarver/coding/www/react-random-art-richter/src/Grid/Grid.js",[],["61","62"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/App.js",["63","64"],"import React, {Component} from 'react';\nimport Grid from './Grid/Grid';\nimport generateEmptyGrid from './functions/generateEmptyGrid';\nimport {randomRGB} from './functions/colorFunctions';\nimport {fillColor, fillStart} from './functions/fillGrid';\nimport Nav from './Nav/Nav';\nimport {Route ,Redirect} from 'react-router-dom';\nimport GridContext from './GridContext';\nimport GridForm from './GridForm/GridForm'\n\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      emptyGridsRendered: false,\n      small: {\n        totalColumns: 10, //25\n        totalRows: 10, //12\n        totalCells: null,\n        totalCellsFilled: 0,\n        filling: false,\n        fillCenters: [],\n        fillableCells: [],\n        grid: null,\n        formConstraints: {\n          colorChances: {\n            same: 80,\n            skew: 19\n          },\n          skewConstraints: {\n            changeRange: 10\n          },\n          nodeConstraints: {\n            totalStart: 1,\n            chanceNew: 0,\n            chanceNewSame: 0,\n            chanceNewDiff: 0\n          },\n          timeSizeConstraints: {\n            intervalDelay: 1000\n          }\n        }\n      },\n      medium: {\n        totalColumns: 42,\n        totalRows: 20,\n        totalCells: null,\n        totalCellsFilled: 0,\n        filling: false,\n        fillCenters: [],\n        fillableCells: [],\n        grid: null,\n        formConstraints: {\n          colorChances: {\n            same: 80,\n            skew: 19\n          },\n          skewConstraints: {\n            changeRange: 10\n          },\n          nodeConstraints: {\n            totalStart: 1,\n            chanceNew: 0,\n            chanceNewSame: 0,\n            chanceNewDiff: 0\n          },\n          timeSizeConstraints: {\n            intervalDelay: 750\n          }\n        }\n      },\n      large: {\n        totalColumns: 84,\n        totalRows: 40,\n        totalCells: null,\n        totalCellsFilled: 0,\n        filling: false,\n        fillCenters: [],\n        fillableCells: [],\n        grid: null,\n        formConstraints: {\n          colorChances: {\n            same: 80,\n            skew: 19\n          },\n          skewConstraints: {\n            changeRange: 10\n          },\n          nodeConstraints: {\n            totalStart: 1,\n            chanceNew: 0,\n            chanceNewSame: 0,\n            chanceNewDiff: 0\n          },\n          timeSizeConstraints: {\n            intervalDelay: 500\n          }\n        }\n      },\n      extraLarge: {\n        totalColumns: 250,\n        totalRows: 120,\n        totalCells: null,\n        totalCellsFilled: 0,\n        filling: false,\n        fillCenters: [],\n        fillableCells: [],\n        grid: null,\n        formConstraints: {\n          colorChances: {\n            same: 80,\n            skew: 19\n          },\n          skewConstraints: {\n            changeRange: 10\n          },\n          nodeConstraints: {\n            totalStart: 1,\n            chanceNew: 0,\n            chanceNewSame: 0,\n            chanceNewDiff: 0\n          },\n          timeSizeConstraints: {\n            intervalDelay: 250\n          }\n        }\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.setState(prevState => ({\n      emptyGridsRendered: true,\n      small: {\n        ...prevState.small,\n        totalCells: this.state.small.totalRows * this.state.small.totalColumns,\n        grid: generateEmptyGrid(this.state.small, 'small'),\n      },\n      medium: {\n        ...prevState.medium,\n        totalCells: this.state.medium.totalRows * this.state.medium.totalColumns,\n        grid: generateEmptyGrid(this.state.medium, 'medium')\n      },\n      large: {\n        ...prevState.large,\n        totalCells: this.state.large.totalRows * this.state.large.totalColumns,\n        grid: generateEmptyGrid(this.state.large, 'large')\n      },\n      extraLarge: {\n        ...prevState.extraLarge,\n        totalCells: this.state.extraLarge.totalRows * this.state.extraLarge.totalColumns,\n        grid: generateEmptyGrid(this.state.extraLarge, 'extraLarge')\n      }\n\n    }))   \n  }\n\n  handleFormStart = (event, gridId) => {\n    event.preventDefault();\n\n    this.setState({ [gridId]: fillStart(this.state[gridId],gridId)})\n\n    const intervalDelay = this.state[gridId].formConstraints.timeSizeConstraints.intervalDelay;\n    const fillInterval = setInterval(() => {\n      if (this.state[gridId].totalCellsFilled < this.state[gridId].totalCells && this.state[gridId].filling) {\n        this.setState({\n          [gridId]: fillColor(this.state[gridId])\n        })\n      } else {\n        if (this.state[gridId].filling) {\n          this.setState({\n            [gridId]: {\n              ...this.state[gridId],\n              filling: false\n            }\n          })\n        }\n        clearInterval(fillInterval);\n        console.log('interval cleared')\n      }\n    },intervalDelay);\n  }\n\n  handleFormStop = (event, gridId) => {\n    event.preventDefault();\n\n    this.setState({\n      [gridId]: {\n        ...this.state[gridId],\n        filling: false\n      }\n    })\n  }\n\n  updateColorChances = (gridId, valueId, value) => {\n    this.setState(prevState => ({\n      ...prevState,\n      [gridId]: {\n        ...prevState[gridId],\n        formConstraints: {\n          ...prevState[gridId].formConstraints,\n          colorChances: {\n            ...prevState[gridId].formConstraints.colorChances,\n            [valueId]: value\n          }\n        }\n      }\n    }))\n  }\n\n  updateSkewConstraints = (gridId, valueId, value) => {\n    this.setState(prevState => ({\n      ...prevState,\n      [gridId]: {\n        ...prevState[gridId],\n        formConstraints: {\n          ...prevState[gridId].formConstraints,\n          skewConstraints: {\n            ...prevState[gridId].formConstraints.skewConstraints,\n            [valueId]: value\n          }\n        }\n      }\n    }))\n  }\n\n  updateNodeConstraints = (gridId, valueId, value) => {\n    this.setState(prevState => ({\n      ...prevState,\n      [gridId]: {\n        ...prevState[gridId],\n        formConstraints: {\n          ...prevState[gridId].formConstraints,\n          nodeConstraints: {\n            ...prevState[gridId].formConstraints.nodeConstraints,\n            [valueId]: value\n          }\n        }\n      }\n    }))\n  }\n\n  updateTimeSizeConstraints = (gridId, valueId, value) => {\n    this.setState(prevState => ({\n      ...prevState,\n      [gridId]: {\n        ...prevState[gridId],\n        formConstraints: {\n          ...prevState[gridId].formConstraints,\n          timeSizeConstraints: {\n            ...prevState[gridId].formConstraints.timeSizeConstraints,\n            [valueId]: value\n          }\n        }\n      }\n    }))\n  }\n  \n  \n  render() {\n    const contextValue = {\n      small: this.state.small,\n      medium: this.state.medium,\n      large: this.state.large,\n      extraLarge: this.state.extraLarge,\n      formStart: this.handleFormStart,\n      updateColorChances: this.updateColorChances,\n      updateSkewConstraints: this.updateSkewConstraints,\n      updateNodeConstraints: this.updateNodeConstraints,\n      updateTimeSizeConstraints: this.updateTimeSizeConstraints,\n      formStop: this.handleFormStop\n    }\n\n    return (\n      <GridContext.Provider value={contextValue}>\n        <div className=\"App\">\n          <Nav />\n          <main >\n            {this.state.emptyGridsRendered && <Route exact path={'/grid/:gridId'} component={GridForm}/>}\n            {this.state.emptyGridsRendered && <Route exact path={'/grid/:gridId'} component={Grid}/>}\n          </main>\n        </div> \n      </GridContext.Provider>    \n    );\n  }\n  \n}\n\nexport default App;",["65","66"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/index.js",[],["67","68"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/fillGrid.js",["69","70","71"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/generateEmptyGrid.js",["72","73"],"import {randomRGB} from './colorFunctions';\n\nfunction generateEmptyCell(col, r, gridSize, animationDelay) {\n    const cellId = `c${col}r${r}`\n    const emptyCell = {\n        id: cellId,\n        column: col,\n        row: r,\n        gridSize: gridSize,\n        opacity: 0,\n        color: null\n    }\n    return emptyCell\n}\n\nexport default function generateEmptyGrid(state, gridSize) {\n    const gridState = {}\n    const gridArray = []\n    let animationDelay = 0\n    for (let i = 0; i < state.totalColumns; i++) {\n        const columnArray = []\n        for (let p = 0; p < state.totalRows; p++) {\n            columnArray.push(generateEmptyCell(i, p, gridSize, animationDelay))\n            animationDelay += .01\n        }\n        gridArray.push(columnArray)\n    }\n    gridState.columns = gridArray\n    return gridState\n}\n\nexport function generateDummyGrid() {\n    const gridState = {}\n    const gridArray = []\n    let animationDelay = 0\n    for (let i = 0; i < 10; i++) {\n        const columnArray = []\n        for (let p = 0; p < 10; p++) {\n            columnArray.push(generateEmptyCell(i, p, 'testSize', .05))\n            animationDelay += .01\n        }\n        gridArray.push(columnArray)\n    }\n    gridState.columns = gridArray\n    return gridState\n}",["74","75"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/GridContext.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/GridForm/GridForm.js",[],["76","77"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/Nav/Nav.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/colorFunctions.js",["78"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/colorFillChances/colorFillChances.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/Cell/Cell.js",["79"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/TimeSizeConstraints/TimeSizeConstraints.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/NodeConstraints/NodeConstraints.js",[],{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"84","severity":1,"message":"85","line":4,"column":9,"nodeType":"86","messageId":"87","endLine":4,"endColumn":18},{"ruleId":"84","severity":1,"message":"88","line":7,"column":16,"nodeType":"86","messageId":"87","endLine":7,"endColumn":24},{"ruleId":"80","replacedBy":"89"},{"ruleId":"82","replacedBy":"90"},{"ruleId":"80","replacedBy":"91"},{"ruleId":"82","replacedBy":"92"},{"ruleId":"84","severity":1,"message":"93","line":1,"column":8,"nodeType":"86","messageId":"87","endLine":1,"endColumn":13},{"ruleId":"84","severity":1,"message":"94","line":1,"column":16,"nodeType":"86","messageId":"87","endLine":1,"endColumn":25},{"ruleId":"84","severity":1,"message":"95","line":20,"column":10,"nodeType":"86","messageId":"87","endLine":20,"endColumn":26},{"ruleId":"84","severity":1,"message":"85","line":1,"column":9,"nodeType":"86","messageId":"87","endLine":1,"endColumn":18},{"ruleId":"84","severity":1,"message":"96","line":40,"column":13,"nodeType":"86","messageId":"87","endLine":40,"endColumn":27},{"ruleId":"80","replacedBy":"97"},{"ruleId":"82","replacedBy":"98"},{"ruleId":"80","replacedBy":"99"},{"ruleId":"82","replacedBy":"100"},{"ruleId":"84","severity":1,"message":"93","line":1,"column":8,"nodeType":"86","messageId":"87","endLine":1,"endColumn":13},{"ruleId":"84","severity":1,"message":"96","line":23,"column":15,"nodeType":"86","messageId":"87","endLine":23,"endColumn":29},"no-native-reassign",["101"],"no-negated-in-lhs",["102"],"no-unused-vars","'randomRGB' is defined but never used.","Identifier","unusedVar","'Redirect' is defined but never used.",["101"],["102"],["101"],["102"],"'React' is defined but never used.","'Component' is defined but never used.","'selectFillCenter' is defined but never used.","'animationDelay' is assigned a value but never used.",["101"],["102"],["101"],["102"],"no-global-assign","no-unsafe-negation"]