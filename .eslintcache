[{"/Users/jonahtarver/coding/www/react-random-art-richter/src/Grid/Grid.js":"1","/Users/jonahtarver/coding/www/react-random-art-richter/src/App.js":"2","/Users/jonahtarver/coding/www/react-random-art-richter/src/index.js":"3","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/fillGrid.js":"4","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/generateEmptyGrid.js":"5","/Users/jonahtarver/coding/www/react-random-art-richter/src/GridContext.js":"6","/Users/jonahtarver/coding/www/react-random-art-richter/src/GridForm/GridForm.js":"7","/Users/jonahtarver/coding/www/react-random-art-richter/src/Nav/Nav.js":"8","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/colorFunctions.js":"9","/Users/jonahtarver/coding/www/react-random-art-richter/src/colorFillChances/colorFillChances.js":"10","/Users/jonahtarver/coding/www/react-random-art-richter/src/Cell/Cell.js":"11","/Users/jonahtarver/coding/www/react-random-art-richter/src/TimeSizeConstraints/TimeSizeConstraints.js":"12","/Users/jonahtarver/coding/www/react-random-art-richter/src/NodeConstraints/NodeConstraints.js":"13","/Users/jonahtarver/coding/www/react-random-art-richter/src/GridStatus/GridStatus.js":"14","/Users/jonahtarver/coding/www/react-random-art-richter/src/SkewConstraints/SkewConstraints.js":"15","/Users/jonahtarver/coding/www/react-random-art-richter/src/Column/Column.js":"16"},{"size":703,"mtime":1611737774425,"results":"17","hashOfConfig":"18"},{"size":7079,"mtime":1612403239007,"results":"19","hashOfConfig":"18"},{"size":263,"mtime":1608105442000,"results":"20","hashOfConfig":"18"},{"size":7618,"mtime":1611737886614,"results":"21","hashOfConfig":"18"},{"size":1250,"mtime":1609315498000,"results":"22","hashOfConfig":"18"},{"size":424,"mtime":1612403039097,"results":"23","hashOfConfig":"18"},{"size":1040,"mtime":1611797526320,"results":"24","hashOfConfig":"18"},{"size":357,"mtime":1611216443103,"results":"25","hashOfConfig":"18"},{"size":438,"mtime":1608103096000,"results":"26","hashOfConfig":"18"},{"size":1993,"mtime":1611720721289,"results":"27","hashOfConfig":"18"},{"size":866,"mtime":1610146131557,"results":"28","hashOfConfig":"18"},{"size":2250,"mtime":1611731784226,"results":"29","hashOfConfig":"18"},{"size":2742,"mtime":1611720625103,"results":"30","hashOfConfig":"18"},{"size":858,"mtime":1611269329823,"results":"31","hashOfConfig":"18"},{"size":4513,"mtime":1611732564822,"results":"32","hashOfConfig":"18"},{"size":542,"mtime":1608167250000,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"19zx1a4",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/jonahtarver/coding/www/react-random-art-richter/src/Grid/Grid.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/App.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/index.js",[],["72","73"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/fillGrid.js",["74","75","76","77"],"import React, {Component} from 'react';\nimport {randomRGB} from './colorFunctions';\nimport generateEmptyGrid from './generateEmptyGrid';\n\nfunction randomFromRange(range) {\n    return Math.floor(Math.random() * range)\n}\n\nfunction randomFromArray(array) {\n    const i = randomFromRange(array.length)\n    return array[i]\n}\n\nfunction selectRandomCell(totalColumns, totalRows) {\n    const column = randomFromRange(totalColumns);\n    const row = randomFromRange(totalRows);\n    return {column, row}\n}\n\nfunction selectFillCenter(currentGrid) {\n    const index = randomFromRange(currentGrid.fillCenters.length)\n    const coors = currentGrid.fillCenters[index]\n    return {coors, index}\n    \n}\n\nexport function rangedRandomRGB(gridConst) {\n    const colorRanges = gridConst.skew\n    const colorObject = {}\n    colorObject.red = (randomFromRange(colorRanges.redUpper - colorRanges.redLow + 1) + colorRanges.redLow)\n    colorObject.green = (randomFromRange(colorRanges.greenUpper - colorRanges.greenLow + 1) + colorRanges.greenLow)\n    colorObject.blue = (randomFromRange(colorRanges.blueUpper - colorRanges.blueLow + 1) + colorRanges.blueLow)\n    const rgb = `rgba(${colorObject.red}, ${colorObject.green}, ${colorObject.blue}, 1)`\n    colorObject.rgb = rgb\n    return colorObject\n}\n\nfunction allSurrCoors(gridCols, cellCoor) {\n    const columns = [cellCoor.column-1, cellCoor.column, cellCoor.column+1]\n        .filter(num => num > -1 && num < gridCols.length)\n    const rows = [cellCoor.row-1, cellCoor.row, cellCoor.row+1]\n        .filter(num => num > -1 && num < gridCols[0].length)\n    const coors = [];\n    for (let c = 0; c < columns.length; c++) {\n        for (let r = 0; r < rows.length; r++) {\n            const id = `c${columns[c]}r${rows[r]}`\n            const coor = {column: columns[c], row: rows[r], id}\n            if (!(cellCoor.column === coor.column && cellCoor.row === coor.row)) {\n                coors.push(coor)\n            }\n\n        }\n    }\n    return coors\n}\n\nfunction getSurrEmpties(gridCols, cellCoor) {\n    const surrCoors = allSurrCoors(gridCols, cellCoor)\n    const surrEmpties = surrCoors.filter(coor => \n        gridCols[coor.column][coor.row].color === null)\n    return surrEmpties\n}\n\nfunction getSurrColors(gridCols, cellCoor) {\n    const coors = allSurrCoors(gridCols, cellCoor);\n    const surrColors = coors.filter(coor =>\n        gridCols[coor.column][coor.row].color !== null)\n    return surrColors\n}\n\nfunction updateFillableCells(gridCols, fillableCells, currentCoor) {\n    const newList = fillableCells.filter(cell => cell.id !== currentCoor.id)\n    const allSurrEmpties = getSurrEmpties(gridCols, currentCoor)\n    const newFillables = []\n    for(let i = 0; i < allSurrEmpties.length; i++) {\n        if(!fillableCells.some(cell => cell.id === allSurrEmpties[i].id)) {\n            newFillables.push(allSurrEmpties[i])\n        }\n    }\n    return newList.concat(newFillables)\n}\n\nfunction skewColor(color, currentGridConstraints) {\n    const range = currentGridConstraints.skew.changeRange\n    let red \n    let green\n    let blue\n    const redChange = (randomFromRange(range) + 1)\n    const greenChange = (randomFromRange(range) + 1)\n    const blueChange = (randomFromRange(range) + 1)\n\n    if (Math.random() < .5) {\n        red = color.red + redChange\n        if (red > currentGridConstraints.skew.redUpper) {\n            red = currentGridConstraints.skew.redUpper\n        }\n    } else {\n        red = color.red - redChange\n        if (red < currentGridConstraints.skew.redLow) {\n            red = currentGridConstraints.skew.redLow\n        }\n    }\n\n    if (Math.random() < .5) {\n        green = color.green + greenChange\n        if (green > currentGridConstraints.skew.greenUpper) {\n            green = currentGridConstraints.skew.greenUpper\n        }\n    } else {\n        green = color.green - greenChange\n        if (green < currentGridConstraints.skew.greenLow) {\n            green = currentGridConstraints.skew.greenLow\n        }\n    }\n\n    if (Math.random() < .5) {\n        blue = color.blue + blueChange\n        if (blue > currentGridConstraints.skew.blueUpper) {\n            blue = currentGridConstraints.skew.blueUpper\n        }\n    } else {\n        blue = color.blue - blueChange\n        if (blue < currentGridConstraints.skew.blueLow) {\n            blue = currentGridConstraints.skew.blueLow\n        }\n    }\n\n    const rgb = `rgba(${red}, ${green}, ${blue}, 1)`\n\n    const newColor = {red, green, blue, rgb}\n    return newColor\n}\n\nfunction selectNewColor(surrColor, currentGridConstraints) {\n    const probability = (Math.random()*100)\n    const colorChances = currentGridConstraints.colorChances\n    let newColor\n    if (probability <= parseFloat(colorChances.same)) {\n        newColor = surrColor\n    } else if (probability <= parseFloat(colorChances.same) + parseFloat(colorChances.skew)) {\n        newColor = skewColor(surrColor, currentGridConstraints)\n    } else {\n        newColor = rangedRandomRGB(currentGridConstraints)\n    }\n    return newColor\n}\n\nfunction fillInitCells(currentGrid) {\n    const totalStartNodes = currentGrid.formConstraints.node.totalStart\n    for (let i = 1; i <= totalStartNodes; i++) {\n        const cellCoor = selectRandomCell(currentGrid.totalColumns, currentGrid.totalRows);\n        currentGrid.grid.columns[cellCoor.column][cellCoor.row].color = rangedRandomRGB(currentGrid.formConstraints);\n        currentGrid.grid.columns[cellCoor.column][cellCoor.row].opacity = 1;\n        currentGrid.totalCellsFilled += 1\n        currentGrid.fillableCells = currentGrid.fillableCells.concat(getSurrEmpties(currentGrid.grid.columns, cellCoor))\n    }\n    return currentGrid\n}\n\nexport function fillStart(currentGrid, gridId) {\n    if (currentGrid.totalCellsFilled === currentGrid.totalCells || currentGrid.grid === null) {\n        currentGrid.grid = generateEmptyGrid(currentGrid, gridId)\n        currentGrid.totalCellsFilled = 0\n    }\n\n    if (currentGrid.totalCellsFilled === 0) {\n        currentGrid = fillInitCells(currentGrid)\n    }\n\n    currentGrid.filling = true\n    return currentGrid\n}\n\nfunction fillColor(currentGrid) {\n    const gridCols = currentGrid.grid.columns\n    const fillableCoor = randomFromArray(currentGrid.fillableCells)\n    \n\n    const fillableCells = updateFillableCells(gridCols, currentGrid.fillableCells, fillableCoor)\n\n    const surrColorsCoors = getSurrColors(gridCols, fillableCoor)\n    const baseColorCoor = randomFromArray(surrColorsCoors)\n    const baseColor = currentGrid.grid.columns[baseColorCoor.column][baseColorCoor.row].color\n    const newColor = selectNewColor(baseColor, currentGrid.formConstraints)\n    currentGrid.grid.columns[fillableCoor.column][fillableCoor.row].color = newColor;\n    currentGrid.grid.columns[fillableCoor.column][fillableCoor.row].opacity = 1;\n    currentGrid.totalCellsFilled += 1;\n    // currentGrid.fillCenters = fillCenters\n    currentGrid.fillableCells = fillableCells\n\n    return currentGrid\n}\n\nexport function fillCellGroup(currentGrid) {\n    const groupSizePerc = currentGrid.formConstraints.timeSize.fillGroupSize / 100\n    const groupSize = Math.floor(currentGrid.totalCells * groupSizePerc)\n    const cellsLeft = currentGrid.totalCells - currentGrid.totalCellsFilled\n    let newGrid = currentGrid\n    if (cellsLeft > groupSize) {\n        for (let i = 0; i < groupSize; i++) {\n            newGrid = fillColor(newGrid)\n        }\n    } else {\n        for (let i = 0; i < cellsLeft; i++) {\n            newGrid = fillColor(newGrid)\n        }\n    }\n    newGrid.filledThisRound = newGrid.filledThisRound + (groupSizePerc * 100)\n    newGrid.firstPortionFilled = true;\n    return newGrid\n}","/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/generateEmptyGrid.js",["78","79"],"import {randomRGB} from './colorFunctions';\n\nfunction generateEmptyCell(col, r, gridSize, animationDelay) {\n    const cellId = `c${col}r${r}`\n    const emptyCell = {\n        id: cellId,\n        column: col,\n        row: r,\n        gridSize: gridSize,\n        opacity: 0,\n        color: null\n    }\n    return emptyCell\n}\n\nexport default function generateEmptyGrid(state, gridSize) {\n    const gridState = {}\n    const gridArray = []\n    let animationDelay = 0\n    for (let i = 0; i < state.totalColumns; i++) {\n        const columnArray = []\n        for (let p = 0; p < state.totalRows; p++) {\n            columnArray.push(generateEmptyCell(i, p, gridSize, animationDelay))\n            animationDelay += .01\n        }\n        gridArray.push(columnArray)\n    }\n    gridState.columns = gridArray\n    return gridState\n}\n\nexport function generateDummyGrid() {\n    const gridState = {}\n    const gridArray = []\n    let animationDelay = 0\n    for (let i = 0; i < 10; i++) {\n        const columnArray = []\n        for (let p = 0; p < 10; p++) {\n            columnArray.push(generateEmptyCell(i, p, 'testSize', .05))\n            animationDelay += .01\n        }\n        gridArray.push(columnArray)\n    }\n    gridState.columns = gridArray\n    return gridState\n}","/Users/jonahtarver/coding/www/react-random-art-richter/src/GridContext.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/GridForm/GridForm.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/Nav/Nav.js",[],["80","81"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/functions/colorFunctions.js",["82"],"import React from 'react';\n\nfunction randomFromRange(range) {\n    return Math.floor(Math.random() * range)\n}\n\nexport function randomRGB() {\n    const colorObject = {}\n    colorObject.red = randomFromRange(256)\n    colorObject.green = randomFromRange(256)\n    colorObject.blue = randomFromRange(256)\n    const rgb = `rgba(${colorObject.red}, ${colorObject.green}, ${colorObject.blue}, 1)`\n    colorObject.rgb = rgb\n    return colorObject\n}","/Users/jonahtarver/coding/www/react-random-art-richter/src/colorFillChances/colorFillChances.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/Cell/Cell.js",["83"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/TimeSizeConstraints/TimeSizeConstraints.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/NodeConstraints/NodeConstraints.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/GridStatus/GridStatus.js",[],["84","85"],"/Users/jonahtarver/coding/www/react-random-art-richter/src/SkewConstraints/SkewConstraints.js",[],"/Users/jonahtarver/coding/www/react-random-art-richter/src/Column/Column.js",[],{"ruleId":"86","replacedBy":"87"},{"ruleId":"88","replacedBy":"89"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":8,"nodeType":"92","messageId":"93","endLine":1,"endColumn":13},{"ruleId":"90","severity":1,"message":"94","line":1,"column":16,"nodeType":"92","messageId":"93","endLine":1,"endColumn":25},{"ruleId":"90","severity":1,"message":"95","line":2,"column":9,"nodeType":"92","messageId":"93","endLine":2,"endColumn":18},{"ruleId":"90","severity":1,"message":"96","line":20,"column":10,"nodeType":"92","messageId":"93","endLine":20,"endColumn":26},{"ruleId":"90","severity":1,"message":"95","line":1,"column":9,"nodeType":"92","messageId":"93","endLine":1,"endColumn":18},{"ruleId":"90","severity":1,"message":"97","line":40,"column":13,"nodeType":"92","messageId":"93","endLine":40,"endColumn":27},{"ruleId":"86","replacedBy":"98"},{"ruleId":"88","replacedBy":"99"},{"ruleId":"90","severity":1,"message":"91","line":1,"column":8,"nodeType":"92","messageId":"93","endLine":1,"endColumn":13},{"ruleId":"90","severity":1,"message":"97","line":23,"column":15,"nodeType":"92","messageId":"93","endLine":23,"endColumn":29},{"ruleId":"86","replacedBy":"100"},{"ruleId":"88","replacedBy":"101"},"no-native-reassign",["102"],"no-negated-in-lhs",["103"],"no-unused-vars","'React' is defined but never used.","Identifier","unusedVar","'Component' is defined but never used.","'randomRGB' is defined but never used.","'selectFillCenter' is defined but never used.","'animationDelay' is assigned a value but never used.",["102"],["103"],["102"],["103"],"no-global-assign","no-unsafe-negation"]